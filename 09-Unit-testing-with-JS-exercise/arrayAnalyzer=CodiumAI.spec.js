import { analyzeArray } from "./arrayAnalyzer.js";
import { expect } from "chai";
import { assert } from "chai";


// Generated by CodiumAI

describe('analyzeArray', () => {

    // Returns an object with min, max, and length properties when passed a valid array of numbers.
    it('should return an object with min, max, and length properties when passed a valid array of numbers', () => {
        const arr = [1, 2, 3, 4, 5];
        const result = analyzeArray(arr);
        assert.deepEqual(result, { min: 1, max: 5, length: 5 });
    });
    it('should return undefined when passed an empty array', () => {
        const arr = [];
        const result = analyzeArray(arr);
        assert.equal(result, undefined);
    });
    it('should return undefined when passed a non-array', () => {
        const nonArray = 'not an array';
        const result = analyzeArray(nonArray);
        assert.equal(result, undefined);
    });
    it('should return undefined when array contains non-number', () => {
        const arr = [1, 2, 'three', 4, 5];
        const result = analyzeArray(arr);
        assert.equal(result, undefined);
    });

    // Returns undefined when passed an empty array.
    it('should return undefined when passed an empty array', () => {
      const arr = [];
      const result = analyzeArray(arr);
      expect(result).to.be.undefined;
    });

    // Returns undefined when passed a non-array argument.
    it('should return undefined when passed a non-array argument', () => {
        const arr = 'not an array';
        const result = analyzeArray(arr);
         expect(result).to.be.undefined;
    });

    // Returns an object with min, max, and length properties when passed an array with one element.
    it('should return an object with min, max, and length properties when passed an array with one element', () => {
        const arr = [5];
        const result = analyzeArray(arr);
        assert.deepEqual(result, { min: 5, max: 5, length: 1 });
    });

    // Returns an object with min and max properties equal to the single element when passed an array with one element.
    it('should return an object with min and max properties equal to the single element when passed an array with one element', () => {
        const arr = [10];
        const result = analyzeArray(arr);
        assert.deepEqual(result, { min: 10, max: 10, length: 1 });
    });

    // Returns an object with min and max properties equal to the first element when passed an array with duplicate elements.
    it('should return an object with min and max properties equal to the first element when passed an array with duplicate elements', () => {
        const arr = [2, 2, 2, 2];
        const result = analyzeArray(arr);
        assert.deepEqual(result, { min: 2, max: 2, length: 4 });
    });
});